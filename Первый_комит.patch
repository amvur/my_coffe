Subject: [PATCH] Первый комит
---
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/.gitignore	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,69 @@
+# Игнорировать файлы и папки, связанные с PyCharm
+.idea/
+*.iml
+*.ipr
+*.iws
+
+# Игнорировать виртуальное окружение
+venv/
+env/
+.env/
+.venv/
+ENV/
+
+# Игнорировать файлы Python
+__pycache__/
+*.py[cod]
+*$py.class
+*.so
+.Python
+build/
+develop-eggs/
+dist/
+downloads/
+eggs/
+.eggs/
+lib/
+lib64/
+parts/
+sdist/
+var/
+wheels/
+*.egg-info/
+.installed.cfg
+*.egg
+
+# Игнорировать файлы базы данных
+*.sqlite3
+*.db
+
+# Игнорировать файлы с секретами
+.env
+.env.local
+.env.dev
+.env.prod
+.secrets
+*.key
+*.pem
+
+# Игнорировать статические файлы (если они собираются автоматически)
+staticfiles/
+mediafiles/
+
+# Игнорировать логи
+*.log
+logs/
+
+# Игнорировать файлы операционной системы
+.DS_Store
+Thumbs.db
+
+# Игнорировать файлы pytest
+.pytest_cache/
+
+# Игнорировать файлы coverage
+.coverage
+htmlcov/
+
+# Игнорировать файлы миграций (опционально, если вы хотите отслеживать их в репозитории)
+# migrations/
\ No newline at end of file
Index: corn/corn/asgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/corn/asgi.py b/corn/corn/asgi.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/corn/asgi.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,16 @@
+"""
+ASGI config for corn project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'corn.settings')
+
+application = get_asgi_application()
Index: corn/corn/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/corn/settings.py b/corn/corn/settings.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/corn/settings.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,130 @@
+"""
+Django settings for corn project.
+
+Generated by 'django-admin startproject' using Django 5.1.7.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.1/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/5.1/ref/settings/
+"""
+import os
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'django-insecure-)j5f+^!yq9hk1fu%d0_9!33*jf4c836=fh3c=rff94idmd&-a2'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'warehouse.apps.WarehouseConfig',
+    'directory.apps.DirectoryConfig',
+
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'corn.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [os.path.join(BASE_DIR, 'templates')],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'corn.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/5.1/topics/i18n/
+
+LANGUAGE_CODE = 'ru'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/5.1/howto/static-files/
+
+STATIC_URL = 'static/'
+STATIC_ROOT = os.path.join(BASE_DIR, 'static')
+
+MEDIA_URL = '/media/'
+MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
Index: corn/corn/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/corn/urls.py b/corn/corn/urls.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/corn/urls.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,29 @@
+"""
+URL configuration for corn project.
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/5.1/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.conf import settings
+from django.conf.urls.static import static
+from django.contrib import admin
+from django.urls import path, include
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+    path('warehouse/', include('warehouse.urls')),
+    path('products/', include('directory.urls')),
+]
+if settings.DEBUG:
+    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
+
Index: corn/corn/wsgi.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/corn/wsgi.py b/corn/corn/wsgi.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/corn/wsgi.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,16 @@
+"""
+WSGI config for corn project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'corn.settings')
+
+application = get_wsgi_application()
Index: corn/directory/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/admin.py b/corn/directory/admin.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/admin.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,23 @@
+from django.contrib import admin
+from .models import *
+
+
+class OrderItemInline(admin.TabularInline):
+    model = OrderItem
+    extra = 1
+    readonly_fields = ('price', 'sum')
+
+@admin.register(OrderTable)
+class OrderTableAdmin(admin.ModelAdmin):
+    list_display = ('id', 'table', 'products_list', 'date', 'status')
+    inlines = [OrderItemInline]
+
+@admin.register(OrderItem)
+class OrderItemAdmin(admin.ModelAdmin):
+    list_display = ('order', 'product', 'count', 'price', 'sum')
+    readonly_fields = ('price', 'sum')
+
+admin.site.register(Products)
+admin.site.register(Category)
+admin.site.register(Type)
+
Index: corn/directory/apps.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/apps.py b/corn/directory/apps.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/apps.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class DirectoryConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'directory'
Index: corn/directory/forms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/forms.py b/corn/directory/forms.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/forms.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,35 @@
+from django import forms
+from django.core.exceptions import ValidationError
+from .models import OrderTable, OrderItem, Products  # Импортируем модели
+#
+# class OrderForm(forms.ModelForm):
+#     class Meta:
+#         model = OrderTable  # Указываем модель, с которой связана форма
+#         fields = ['table', 'status']  # Поля, которые будут отображаться в форме
+#
+#     def __init__(self, *args, **kwargs):
+#         super().__init__(*args, **kwargs)
+#         # Добавляем CSS-классы для стилизации полей формы (опционально)
+#         self.fields['table'].widget.attrs.update({'class': 'form-control'})
+#         self.fields['status'].widget.attrs.update({'class': 'form-control'})
+
+class OrderForm(forms.ModelForm):
+    class Meta:
+        model = OrderTable
+        fields = ['table', 'status']
+# class OrderItemForm(forms.ModelForm):
+#     class Meta:
+#         model = OrderItem  # Указываем модель, с которой связана форма
+#         fields = ['product', 'count']  # Поля, которые будут отображаться в форме
+#
+#     def clean_count(self):
+#         count = self.cleaned_data['count']
+#         if count < 1:
+#             raise ValidationError("Количество не может быть меньше 1.")
+#         return count
+#
+#     def __init__(self, *args, **kwargs):
+#         super().__init__(*args, **kwargs)
+#         # Добавляем CSS-классы для стилизации полей формы (опционально)
+#         self.fields['product'].widget.attrs.update({'class': 'form-control'})
+#         self.fields['count'].widget.attrs.update({'class': 'form-control'})
\ No newline at end of file
Index: corn/directory/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/migrations/0001_initial.py b/corn/directory/migrations/0001_initial.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/migrations/0001_initial.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,52 @@
+# Generated by Django 5.1.7 on 2025-03-09 13:05
+
+import django.db.models.deletion
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Category',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100, verbose_name='Наименование')),
+            ],
+            options={
+                'verbose_name': 'Категория',
+                'verbose_name_plural': 'Категории',
+            },
+        ),
+        migrations.CreateModel(
+            name='Type',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=25, unique=True, verbose_name='Тип')),
+            ],
+            options={
+                'verbose_name': 'Тип',
+                'verbose_name_plural': 'Типы',
+            },
+        ),
+        migrations.CreateModel(
+            name='Products',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=150, verbose_name='Наименования')),
+                ('description', models.TextField(blank=True, null=True, verbose_name='Описание товара')),
+                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена')),
+                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='directory.category', verbose_name='Категория')),
+                ('type', models.ForeignKey(default='шт', on_delete=django.db.models.deletion.PROTECT, to='directory.type', verbose_name='Тип')),
+            ],
+            options={
+                'verbose_name': 'Товар',
+                'verbose_name_plural': 'Товары',
+            },
+        ),
+    ]
Index: corn/directory/migrations/0002_ordertable.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/migrations/0002_ordertable.py b/corn/directory/migrations/0002_ordertable.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/migrations/0002_ordertable.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,29 @@
+# Generated by Django 5.1.7 on 2025-03-09 19:42
+
+import django.db.models.deletion
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('directory', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='OrderTable',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('date', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время')),
+                ('table', models.CharField(default='Стол', max_length=50, verbose_name='Стол')),
+                ('count', models.IntegerField(verbose_name='Коли́чество')),
+                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
+                ('sum', models.DecimalField(decimal_places=2, editable=False, max_digits=10, verbose_name='Сумма')),
+                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='directory.products', verbose_name='Товар')),
+            ],
+            options={
+                'verbose_name': 'Стол заказов',
+            },
+        ),
+    ]
Index: corn/directory/migrations/0003_ordertable_status.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/migrations/0003_ordertable_status.py b/corn/directory/migrations/0003_ordertable_status.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/migrations/0003_ordertable_status.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,18 @@
+# Generated by Django 5.1.7 on 2025-03-09 19:52
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('directory', '0002_ordertable'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='ordertable',
+            name='status',
+            field=models.CharField(choices=[('paid', 'Оплачено'), ('unpaid', 'Неоплачено'), ('canceled', 'Отменено')], default='unpaid', max_length=10, verbose_name='Статус'),
+        ),
+    ]
Index: corn/directory/migrations/0004_alter_ordertable_status_alter_products_price.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/migrations/0004_alter_ordertable_status_alter_products_price.py b/corn/directory/migrations/0004_alter_ordertable_status_alter_products_price.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/migrations/0004_alter_ordertable_status_alter_products_price.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,24 @@
+# Generated by Django 5.1.7 on 2025-03-11 01:22
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('directory', '0003_ordertable_status'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='ordertable',
+            name='status',
+            field=models.CharField(choices=[('paid', 'Оплачено'), ('unpaid', 'Не оплачено'), ('canceled', 'Отменено')], default='unpaid', max_length=10, verbose_name='Статус'),
+        ),
+        migrations.AlterField(
+            model_name='products',
+            name='price',
+            field=models.DecimalField(decimal_places=2, default=1, max_digits=10, verbose_name='Цена'),
+            preserve_default=False,
+        ),
+    ]
Index: corn/directory/migrations/0005_alter_ordertable_options_remove_ordertable_count_and_more.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/migrations/0005_alter_ordertable_options_remove_ordertable_count_and_more.py b/corn/directory/migrations/0005_alter_ordertable_options_remove_ordertable_count_and_more.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/migrations/0005_alter_ordertable_options_remove_ordertable_count_and_more.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,64 @@
+# Generated by Django 5.1.7 on 2025-03-11 07:29
+
+import django.db.models.deletion
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('directory', '0004_alter_ordertable_status_alter_products_price'),
+    ]
+
+    operations = [
+        migrations.AlterModelOptions(
+            name='ordertable',
+            options={'verbose_name': 'Стол заказов', 'verbose_name_plural': 'Столы заказов'},
+        ),
+        migrations.RemoveField(
+            model_name='ordertable',
+            name='count',
+        ),
+        migrations.RemoveField(
+            model_name='ordertable',
+            name='price',
+        ),
+        migrations.RemoveField(
+            model_name='ordertable',
+            name='product',
+        ),
+        migrations.RemoveField(
+            model_name='ordertable',
+            name='sum',
+        ),
+        migrations.AlterField(
+            model_name='ordertable',
+            name='status',
+            field=models.CharField(choices=[('paid', 'Оплачено'), ('unpaid', 'Неоплачено'), ('canceled', 'Отменено')], default='unpaid', max_length=10, verbose_name='Статус'),
+        ),
+        migrations.AlterField(
+            model_name='products',
+            name='price',
+            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена'),
+        ),
+        migrations.CreateModel(
+            name='OrderItem',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('count', models.IntegerField(verbose_name='Количество')),
+                ('price', models.DecimalField(decimal_places=2, editable=False, max_digits=10, verbose_name='Цена')),
+                ('sum', models.DecimalField(decimal_places=2, editable=False, max_digits=10, verbose_name='Сумма')),
+                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='directory.ordertable', verbose_name='Заказ')),
+                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='directory.products', verbose_name='Товар')),
+            ],
+            options={
+                'verbose_name': 'Элемент заказа',
+                'verbose_name_plural': 'Элементы заказа',
+            },
+        ),
+        migrations.AddField(
+            model_name='ordertable',
+            name='products',
+            field=models.ManyToManyField(through='directory.OrderItem', to='directory.products', verbose_name='Товары'),
+        ),
+    ]
Index: corn/directory/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/models.py b/corn/directory/models.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/models.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,86 @@
+from django.db import models
+
+class Type(models.Model):
+    name = models.CharField(max_length=25, unique=True, verbose_name='Тип')
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        verbose_name = "Тип"
+        verbose_name_plural = "Типы"
+
+
+class Category(models.Model):
+    name = models.CharField(max_length=100, verbose_name='Наименование')
+
+    def __str__(self):
+        return f'category {self.name}'
+
+    class Meta:
+        verbose_name = 'Категория'
+        verbose_name_plural = 'Категории'
+
+
+class Products(models.Model):
+    name = models.CharField(max_length=150, verbose_name='Наименования')
+    description = models.TextField(null=True, blank=True, verbose_name='Описание товара')
+    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Цена', blank=True, null=True)
+    category = models.ForeignKey("Category", on_delete=models.CASCADE, blank=True, null=True, verbose_name='Категория')
+    type = models.ForeignKey('Type', on_delete=models.PROTECT, default="шт", verbose_name='Тип')
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        verbose_name = "Товар"
+        verbose_name_plural = 'Товары'
+
+
+class OrderTable(models.Model):
+    STATUS_CHOICES = [
+        ('paid', 'Оплачено'),
+        ('unpaid', 'Неоплачено'),
+        ('canceled', 'Отменено'),
+    ]
+
+    date = models.DateTimeField(auto_now_add=True, verbose_name='Дата и время')
+    table = models.CharField(verbose_name="Стол", max_length=50, default='Стол')
+    status = models.CharField(
+        max_length=10,
+        choices=STATUS_CHOICES,
+        default='unpaid',
+        verbose_name='Статус'
+    )
+    products = models.ManyToManyField(Products, through='OrderItem', verbose_name='Товары')
+
+    def __str__(self):
+        return f'Заказ {self.id} на столе {self.table}'
+
+    def products_list(self):
+        return ", ".join([item.product.name for item in self.orderitem_set.all()])
+    products_list.short_description = 'Товары'
+
+    class Meta:
+        verbose_name = 'Стол заказов'
+        verbose_name_plural = 'Столы заказов'
+
+
+class OrderItem(models.Model):
+    order = models.ForeignKey(OrderTable, on_delete=models.CASCADE, verbose_name='Заказ')
+    product = models.ForeignKey(Products, on_delete=models.PROTECT, verbose_name='Товар')
+    count = models.IntegerField(verbose_name='Количество')
+    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Цена', editable=False)
+    sum = models.DecimalField(max_digits=10, decimal_places=2, editable=False, verbose_name='Сумма')
+
+    def __str__(self):
+        return f'{self.product.name} в заказе {self.order.id}'
+
+    def save(self, *args, **kwargs):
+        self.price = self.product.price
+        self.sum = self.price * self.count
+        super().save(*args, **kwargs)
+
+    class Meta:
+        verbose_name = 'Элемент заказа'
+        verbose_name_plural = 'Элементы заказа'
\ No newline at end of file
Index: corn/directory/templates/directory/create_order.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/templates/directory/create_order.html b/corn/directory/templates/directory/create_order.html
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/templates/directory/create_order.html	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,109 @@
+<!DOCTYPE html>
+<html lang="ru">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>{% if order_id %}Редактирование заказа{% else %}Создание заказа{% endif %}</title>
+    <style>
+        .product-form {
+            margin-bottom: 20px;
+            padding: 10px;
+            border: 1px solid #ccc;
+            border-radius: 5px;
+        }
+        .add-product {
+            margin-top: 10px;
+        }
+        .messages {
+            margin: 20px 0;
+            padding: 10px;
+            border-radius: 5px;
+        }
+        .messages .success {
+            background-color: #d4edda;
+            color: #155724;
+        }
+        .messages .error {
+            background-color: #f8d7da;
+            color: #721c24;
+        }
+    </style>
+</head>
+<body>
+    <h1>{% if order_id %}Редактирование заказа{% else %}Создание заказа{% endif %}</h1>
+
+    <!-- Уведомления -->
+    {% if messages %}
+        <div class="messages">
+            {% for message in messages %}
+                <div class="{{ message.tags }}">{{ message }}</div>
+            {% endfor %}
+        </div>
+    {% endif %}
+
+    <form method="post">
+        {% csrf_token %}
+
+        <!-- Основные данные заказа -->
+        <div>
+            {{ order_form.table.label_tag }} {{ order_form.table }}
+        </div>
+        <div>
+            {{ order_form.status.label_tag }} {{ order_form.status }}
+        </div>
+
+        <!-- Динамические поля для товаров -->
+        <div id="product-forms">
+            {% for item in order_items %}
+                <div class="product-form">
+                    <div>
+                        <label>Товар:</label>
+                        <select name="product-{{ forloop.counter0 }}" required>
+                            {% for product in products %}
+                                <option value="{{ product.id }}" {% if product.id == item.product.id %}selected{% endif %}>{{ product.name }} ({{ product.price }})</option>
+                            {% endfor %}
+                        </select>
+                    </div>
+                    <div>
+                        <label>Количество:</label>
+                        <input type="number" name="count-{{ forloop.counter0 }}" min="1" value="{{ item.count }}" required>
+                    </div>
+                </div>
+            {% endfor %}
+        </div>
+
+        <!-- Кнопка для добавления нового товара -->
+        <button type="button" id="add-product" class="add-product">Добавить товар</button>
+
+        <!-- Кнопка для сохранения заказа -->
+        <button type="submit">Сохранить заказ</button>
+    </form>
+
+    <script>
+        // JavaScript для добавления новых полей товаров
+        document.getElementById('add-product').addEventListener('click', function() {
+            const productForms = document.getElementById('product-forms');
+            const index = productForms.children.length;
+
+            const newForm = document.createElement('div');
+            newForm.classList.add('product-form');
+            newForm.innerHTML = `
+                <div>
+                    <label>Товар:</label>
+                    <select name="product-${index}" required>
+                        {% for product in products %}
+                            <option value="{{ product.id }}">{{ product.name }} ({{ product.price }})</option>
+                        {% endfor %}
+                    </select>
+                </div>
+                <div>
+                    <label>Количество:</label>
+                    <input type="number" name="count-${index}" min="1" value="1" required>
+                </div>
+            `;
+
+            productForms.appendChild(newForm);
+        });
+    </script>
+</body>
+</html>
\ No newline at end of file
Index: corn/directory/templates/directory/order_list.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/templates/directory/order_list.html b/corn/directory/templates/directory/order_list.html
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/templates/directory/order_list.html	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,46 @@
+<!DOCTYPE html>
+<html lang="ru">
+<head>
+    <meta charset="UTF-8">
+    <title>Заказ</title>
+    <style>
+        table {
+            width: 100%;
+            border-collapse: collapse;
+        }
+        table, th, td {
+            border: 1px solid black;
+        }
+        th, td {
+            padding: 8px;
+            text-align: left;
+        }
+    </style>
+</head>
+<body>
+    <h1>Заказ на столе {{ order.table }}</h1>
+    <p>Дата: {{ order.date }}</p>
+    <p>Статус: {{ order.get_status_display }}</p>
+    <table>
+        <thead>
+            <tr>
+                <th>Товар</th>
+                <th>Количество</th>
+                <th>Цена</th>
+                <th>Сумма</th>
+            </tr>
+        </thead>
+        <tbody>
+            {% for item in order.orderitem_set.all %}
+            <tr>
+                <td>{{ item.product.name }}</td>
+                <td>{{ item.count }}</td>
+                <td>{{ item.price }}</td>
+                <td>{{ item.sum }}</td>
+            </tr>
+            {% endfor %}
+        <p>Общая сумма: {{ order.total_sum }}</p>
+        </tbody>
+    </table>
+</body>
+</html>
\ No newline at end of file
Index: corn/directory/templates/directory/product_list.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/templates/directory/product_list.html b/corn/directory/templates/directory/product_list.html
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/templates/directory/product_list.html	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,19 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="UTF-8">
+    <title>Title</title>
+</head>
+<body>
+<h1>Список товаров</h1>
+<ul>
+    {% for product in products %}
+    <li>
+        {{ product.name }} - {{ product.price }}
+        <a href="{% url 'create_order_with_product' product.id %}">Добавить в заказ</a>
+    </li>
+    {% endfor %}
+</ul>
+
+</body>
+</html>
\ No newline at end of file
Index: corn/directory/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/tests.py b/corn/directory/tests.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/tests.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
Index: corn/directory/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/urls.py b/corn/directory/urls.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/urls.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,11 @@
+from django.urls import path
+
+from .views import *
+
+urlpatterns = [
+    path('', product_list, name='product_list'),
+    path('create_order/', create_order, name='create_order'),
+    path('edit_order/<int:order_id>/', edit_order, name='edit_order'),
+    path('orders/', order_list, name='order_list'),
+    path('update_order_status/<int:order_id>/<str:status>/', update_order_status, name='update_order_status'),
+]
\ No newline at end of file
Index: corn/directory/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/directory/views.py b/corn/directory/views.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/directory/views.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,171 @@
+from django.shortcuts import render, redirect, get_object_or_404
+from django.contrib import messages
+from .forms import OrderForm
+from .models import Products, OrderTable, OrderItem
+
+
+def product_list(request):
+    """Отображение списка товаров."""
+    products = Products.objects.all()
+    return render(request, 'directory/product_list.html', {'products': products})
+
+
+def create_order(request):
+    products = Products.objects.all()
+
+    if request.method == 'POST':
+        order_form = OrderForm(request.POST)
+        if order_form.is_valid():
+            order = order_form.save()
+
+            # Словарь для хранения товаров и их количества
+            product_counts = {}
+
+            # Обработка данных POST
+            for key, value in request.POST.items():
+                if key.startswith('product-'):
+                    try:
+                        index = key.split('-')[1]
+                        product_id = value
+                        count = request.POST.get(f'count-{index}')
+
+                        # Проверка наличия product_id и count
+                        if not product_id or not count:
+                            messages.error(request, "Не все поля товара заполнены.")
+                            continue
+
+                        # Преобразование count в число
+                        count = int(count)
+                        if count <= 0:
+                            messages.error(request, f"Количество товара должно быть больше 0.")
+                            continue
+
+                        # Добавление товара в словарь
+                        if product_id in product_counts:
+                            product_counts[product_id] += count
+                        else:
+                            product_counts[product_id] = count
+
+                    except (IndexError, ValueError) as e:
+                        messages.error(request, f"Ошибка обработки данных: {str(e)}")
+                        continue
+
+            # Создание OrderItem для каждого товара
+            for product_id, count in product_counts.items():
+                try:
+                    product = Products.objects.get(id=product_id)
+                    OrderItem.objects.create(
+                        order=order,
+                        product=product,
+                        count=count,
+                        price=product.price,
+                        sum=product.price * count
+                    )
+                except Products.DoesNotExist:
+                    messages.error(request, f"Товар с ID {product_id} не найден.")
+
+            if not messages.get_messages(request):
+                messages.success(request, "Заказ успешно создан.")
+                return redirect('directory/order_detail', order_id=order.id)
+    else:
+        order_form = OrderForm()
+
+    return render(request, 'directory/create_order.html', {
+        'order_form': order_form,
+        'products': products,
+    })
+
+def edit_order(request, order_id):
+    # Получаем заказ или возвращаем 404
+    order = get_object_or_404(OrderTable, id=order_id)
+    order_items = OrderItem.objects.filter(order=order)
+    products = Products.objects.all()
+
+    if request.method == 'POST':
+        order_form = OrderForm(request.POST, instance=order)
+        if order_form.is_valid():
+            # Сохраняем заказ
+            order = order_form.save()
+
+            # Удаляем старые OrderItem
+            order_items.delete()
+
+            # Словарь для хранения товаров и их количества
+            product_counts = {}
+
+            # Обработка данных POST
+            for key, value in request.POST.items():
+                if key.startswith('product-'):
+                    try:
+                        index = key.split('-')[1]
+                        product_id = value
+                        count = request.POST.get(f'count-{index}')
+
+                        # Проверка наличия product_id и count
+                        if not product_id or not count:
+                            messages.error(request, "Не все поля товара заполнены.")
+                            continue
+
+                        # Преобразование count в число
+                        count = int(count)
+                        if count <= 0:
+                            messages.error(request, f"Количество товара должно быть больше 0.")
+                            continue
+
+                        # Добавление товара в словарь
+                        if product_id in product_counts:
+                            product_counts[product_id] += count
+                        else:
+                            product_counts[product_id] = count
+
+                    except (IndexError, ValueError) as e:
+                        messages.error(request, f"Ошибка обработки данных: {str(e)}")
+                        continue
+
+            # Создание OrderItem для каждого товара
+            order_items_to_create = []
+            for product_id, count in product_counts.items():
+                try:
+                    product = Products.objects.get(id=product_id)
+                    order_items_to_create.append(
+                        OrderItem(
+                            order=order,
+                            product=product,
+                            count=count,
+                            price=product.price,
+                            sum=product.price * count
+                        )
+                    )
+                except Products.DoesNotExist:
+                    messages.error(request, f"Товар с ID {product_id} не найден.")
+
+            # Массовое создание OrderItem
+            if order_items_to_create:
+                OrderItem.objects.bulk_create(order_items_to_create)
+
+            if not messages.get_messages(request):
+                messages.success(request, "Заказ успешно обновлен.")
+                return redirect('directory/order_detail', order_id=order.id)
+    else:
+        order_form = OrderForm(instance=order)
+
+    return render(request, 'directory/edit_order.html', {
+        'order_form': order_form,
+        'products': products,
+        'order_items': order_items,
+    })
+
+def order_list(request):
+    """Отображение списка заказов."""
+    orders = OrderTable.objects.all()
+    return render(request, 'directory/order_list.html', {'orders': orders})
+
+
+def update_order_status(request, order_id, status):
+    """Изменение статуса заказа."""
+    order = get_object_or_404(OrderTable, id=order_id)
+    order.status = status
+    order.save()
+    return redirect('order_list')
+
+# Create your views here.
Index: corn/manage.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/manage.py b/corn/manage.py
new file mode 100755
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/manage.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'corn.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
Index: corn/warehouse/admin.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/warehouse/admin.py b/corn/warehouse/admin.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/warehouse/admin.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
Index: corn/warehouse/apps.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/warehouse/apps.py b/corn/warehouse/apps.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/warehouse/apps.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class WarehouseConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'warehouse'
Index: corn/warehouse/migrations/0001_initial.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/warehouse/migrations/0001_initial.py b/corn/warehouse/migrations/0001_initial.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/warehouse/migrations/0001_initial.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,28 @@
+# Generated by Django 5.1.7 on 2025-03-09 13:05
+
+import django.db.models.deletion
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('directory', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='BalanceReport',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('remainder', models.IntegerField(verbose_name='Остаток')),
+                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='directory.products')),
+            ],
+            options={
+                'verbose_name': 'Остаток Товара',
+                'verbose_name_plural': 'Остатки Товаров',
+            },
+        ),
+    ]
Index: corn/warehouse/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/warehouse/models.py b/corn/warehouse/models.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/warehouse/models.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,15 @@
+from django.db import models
+from directory.models import Products
+
+
+class BalanceReport(models.Model):
+    product = models.ForeignKey(Products, on_delete=models.CASCADE)
+    remainder = models.IntegerField(verbose_name='Остаток')
+
+    def __str__(self):
+        return f"Товар: {self.product.name}, Остаток: {self.remainder}, {self.product.types} "
+
+    class Meta:
+        verbose_name = "Остаток Товара"
+        verbose_name_plural = "Остатки Товаров"
+# Create your models here.
Index: corn/warehouse/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/warehouse/tests.py b/corn/warehouse/tests.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/warehouse/tests.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
Index: corn/warehouse/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/warehouse/urls.py b/corn/warehouse/urls.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/warehouse/urls.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,5 @@
+from django.urls import path
+
+urlpatterns = [
+    # path('', )
+]
\ No newline at end of file
Index: corn/warehouse/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/corn/warehouse/views.py b/corn/warehouse/views.py
new file mode 100644
--- /dev/null	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
+++ b/corn/warehouse/views.py	(revision 68ba0869501a5826b7de048f868daddb84d1ef15)
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/corn/corn/__init__.py b/corn/corn/__init__.py
new file mode 100644
diff --git a/corn/directory/__init__.py b/corn/directory/__init__.py
new file mode 100644
diff --git a/corn/directory/migrations/__init__.py b/corn/directory/migrations/__init__.py
new file mode 100644
diff --git a/corn/warehouse/__init__.py b/corn/warehouse/__init__.py
new file mode 100644
diff --git a/corn/warehouse/migrations/__init__.py b/corn/warehouse/migrations/__init__.py
new file mode 100644
